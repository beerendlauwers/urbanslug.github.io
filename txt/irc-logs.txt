Got this advice on ##crypto:
Sorry for the unsolicited PM, but i wanted to mention 
                      something WRT your secure email idea
00:29 <DougieBot5000> If you dont care about persistent threats, you can take 
                      a page out of the cryptolocker malware playbook
00:30 <DougieBot5000> have a public key per user, and when they get a message, 
                      generate a random symmetric key and encrypt their email 
                      with it. Then encrypt that symmetric key to the users 
                      public key and store that with the encrypted message
00:30 <DougieBot5000> now, you have no access to the data (only the user with 
                      the key does)
00:31 <DougieBot5000> however, if messages arrive at your mailserver 
                      unencrypted, it wont really add security
00:31 <DougieBot5000> you just cant be compelled to unencrypt everything
00:32 <DougieBot5000> and, of course, an attacker that can get persistent 
                      malware on your mail server can just sniff plaintext or 
                      the keys before they are encrypted
00:33 <DougieBot5000> but maybe that idea can be paired with somehting else

######## Different #######################
< zipper> In this channel I read that generating an RSA keypair might not be secure. So right now I was wondering about the security of generating an RSA keypair.
04:51 < Riastradh> You'll have to be more specific...
04:57 < zipper> Riastradh: Well it is based on the idea that there can be so many computation possible.
04:58 < zipper> But with modern ways of cryptology it can be broken in that more computations than was imagined can be achieved.
04:58 < yarrkov> No, increase in computational power is not a major threat against RSA.
05:00 < yarrkov> There certainly are many insecure ways to generate RSA keypairs, though. But such issues are more specific to implementations and parameters used (modulus length in 
                 particular).
05:02 < zipper> So basically the way in which we generate RSA keypairs is the bigger issue than RSA encrypted cipher text being decrypted via brute force?
05:02 < yarrkov> Brute force is a total nonissue.
05:03 < zipper> yarrkov: lol but they have quantum computers now.
05:04 < yarrkov> There are a bunch of wrong ways to generate keypairs (e.g. the Debian OpenSSL catastrophe), there are a bunch of ways to do RSA encryption/signing wrong (e.g. bad padding, 
                 side channels)
05:04 < yarrkov> "They" do not have general quantum computers capable of factoring large numbers. Further, factorization via Shor's algorithm is not "brute force".
05:05 < zipper> yarrkov: All I want is to generate secure keypairs
05:05 < yarrkov> The NSA leaked information in particular shows that they cannot break RSA in general and they are rather certain that this will remain impossible in the foreseeable future.
05:06 < yarrkov> zipper: That requires more context.
05:06 < zipper> Secure keypairs in terms of cipher text only attacks
05:07 < zipper> Also advise on a good way to generate random symmetric keys?
05:10 < yarrkov> Generating n-bit RSA-keys: pick (n/2)-bit numbers at random until you find a prime, do it twice to get p and q, confirm that (p-1)(q-1) isn't divisible by your e(=65537 for 
                 example). Generating symmetric keys: pick one n-bit number uniformly at random.
05:10 -!- dirte is now known as BrockH
05:10 < yarrkov> Not that it's that simple in reality; need to do a lot of work to ensure no side channels, good random numbers etc.
05:12 -!- BrockH is now known as dirte
05:13 < zipper> yarrkov: http://arstechnica.com/security/2014/01/how-the-nsa-may-have-put-a-backdoor-in-rsas-cryptography-a-technical-primer/
05:14 < zipper> Although that aims at key generation.
05:14 < yarrkov> RSA the company is not RSA the algorithm.
05:15 < yarrkov> Fortunately almost nobody who uses RSA has ever used RSA Security's software.
05:15 < zipper> lol I though they were talking about the algorithm.
05:16 < zipper> In it's randomness
05:16 < zipper> Elliptic curves are interesting.
05:17 < yarrkov> Different algorithm, unrelated to RSA. One that wasn't used by almost anybody because it was considered ridiculous by all cryptographers immediately, and backdoored very soon 
                 after publication.
05:17 < yarrkov> Elliptic curves are completely extraneous and inappropriate for symmetric algorithms, though.
05:17 < kbs> in a rather tangential observation; have some of you had the experience of people obsessing over using 'ssl everywhere', while simultaneously running .. how best to say this .. 
             interesting wordpress plugins
05:17 < zipper> inappropriate?
05:18 -!- dirte is now known as BrockH
05:18 < zipper> kbs: hahaha interesting wordpress plugins
05:18 < yarrkov> The reason elliptic curves ever became noteworthy in cryptography was the group-theoretic properties relevant to public key cryptography.
05:19 < yarrkov> They are entirely worthless and offer no advantages or any value for symmetric cryptography. They are in fact completely inferior to standard symmetric methods in every way.
05:19 < zipper> yarrkov: I didn't quite get what you said about generating symmetric keys.
05:20 < yarrkov> Normal symmetric n-bit keys are simply random n-bit strings.
05:20 < zipper> yarrkov: Wow what an eye opener. Elliptic curves for assymetric and not for symmetric.
05:20 < yarrkov> Yes
05:20 < zipper> yarrkov: Maybe I should read on AES?
05:21 < zipper> or just use it as it is implemented by hopefully my operating system.
05:22 < yarrkov> AES is not exactly a terrible choice for symmetric encryption, but it has some disadvantages compared to more recent algorithms including Salsa20.
05:23 < yarrkov> Such as difficulty of implementation without side-channels.
05:24 < zipper> Which would you recommend I use for email?
05:24 < yarrkov> Also, being a block cipher, there's some additional responsibility for the user (in particular, choosing and implementing the mode of operation properly).
05:24 < zipper> Ah that question was confusing.
05:27 < zipper> See when mail lands on the server a random symmetric key is generated. It encrypts the email. The symmetric key is then encrypted w/ the users public key and stored w/ email.
05:27 < zipper> So best way to generate the said symmetric key,
05:27 < zipper> *.
05:28 < yarrkov> For an n-bit key, pick n bits at random. Although that terrifies me slightly.
05:28 < zipper> yarrkov: Why so?
05:29 < zipper> The key may be compromised during generation?
05:31 < yarrkov> The email likely arrives as plaintext so it doesn't even matter because it was captured already, additionally because *you* can read it, because the data center peeps can 
                 read it, because there are approximately one zillion things that can go wrong with implementing cryptography yourself
05:31 < yarrkov> for the things that immediately come to my mind
05:32 < zipper> Ha! yes that is an clear issue.
05:32 < zipper> I am still in the process of figuring that out.

